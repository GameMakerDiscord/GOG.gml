<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!gog_init("48500786244777727", "8573705eedaf4808fb704aeecc3763248849238b316e42f9e276b0bf40d01efe")) {
    show_debug_message("Failed to initialize GOG: " + gog_get_error_text());
}
leaderboard_count = 0;
leaderboard_caption = "";
leaderboard_name = undefined;
leaderboard_rank = undefined;
leaderboard_score = undefined;
leaderboard_intent = 0;
auth_state = -1;
stats_state = -1;
avatar_request = -1;
avatar_sprite = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gog_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (async_load[?"event_type"]) {
case "gog_user_auth":
    auth_state = async_load[?"success"];
    if (async_load[?"success"]) {
        // fetch the user's avatar, for example (rest is in async - HTTP)
        var _id = gog_get_user_galaxy_id();
        var _url = gog_get_user_avatar_url(_id, 1);
        avatar_request = http_get_file(_url, "avatar.png");
    }
    break;
case "gog_user_stats": stats_state = async_load[?"success"]; break;
case "gog_leaderboard_retrieve":
    if (!async_load[?"success"]) break;
    // (what were we fetching this for?)
    switch (leaderboard_intent) {
        case 1:
            if (gog_upload_score("best_winners", leaderboard_new_score, true)) {
                show_debug_message("Score uploaded.");
            } else show_debug_message(gog_get_error_text());
            break;
        case 2:
            if (gog_download_scores("best_winners", 1, 25)) {
                show_debug_message("Downloading scores...");
            } else show_debug_message(gog_get_error_text());
            break;
        case 3:
            if (gog_download_scores_around_user("best_winners", -4, 4)) {
                show_debug_message("Downloading scores...");
            } else show_debug_message(gog_get_error_text());
            break;
        case 4:
            if (gog_download_friends_scores("best_winners")) {
                show_debug_message("Downloading scores...");
            } else show_debug_message(gog_get_error_text());
            break;
    }
    leaderboard_intent = 0;
    break;
case "gog_leaderboard_download":
    if (!async_load[?"success"]) break;
    //
    var entries_map = json_decode(async_load[?"entries"]);
    var entries_list = entries_map[?"entries"];
    leaderboard_caption = gog_get_leaderboard_display_name(async_load[?"lb_name"]);
    leaderboard_count = async_load[?"numEntries"];
    // in old versions of GMS you'd instead do
    // if (leaderboard_count &gt; 0) leaderboard_rank[leaderboard_count - 1] = 0;
    leaderboard_rank = array_create(leaderboard_count);
    leaderboard_score = array_create(leaderboard_count);
    leaderboard_name = array_create(leaderboard_count);
    for (var i = 0; i &lt; leaderboard_count; i++) {
        var entry = entries_list[|i];
        leaderboard_rank[i] = entry[?"rank"];
        leaderboard_score[i] = entry[?"score"];
        leaderboard_name[i] = entry[?"name"];
    }
    ds_map_destroy(entries_map);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (async_load[?"id"] == avatar_request) {
    avatar_request = -1;
    if (async_load[?"status"] == 0) {
        avatar_sprite = sprite_add("avatar.png", 1, false, false, 0, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_test);
draw_set_color(c_white);
// show the avatar once loaded:
if (avatar_sprite != -1) {
    draw_sprite(avatar_sprite, 0, 5, room_height - sprite_get_height(avatar_sprite) - 5);
}
// show status:
draw_set_halign(fa_right);
var s = "", i, q;
if (auth_state == true) {
    s += "Logged in#";
} else if (auth_state == false) {
    s += "Failed to login#";
} else s += "Logging in...#";
if (stats_state == true) {
    s += "Stats ready#";
} else if (stats_state == false) {
    s += "Stats failed#";
} else s += "Getting stats...#";
draw_text(room_width - 5, 5, s);
// show instructions:
draw_set_halign(fa_left);
s = "Try things:";
s += "#1: Check achievement";
s += "#2: Acquire achievement";
s += "#3: Set leaderboard score";
s += "#4: Fetch global scores";
s += "#5: Fetch nearby scores";
s += "#6: Fetch friend scores";
s += "#P.S.: all goes into compile form";
draw_text(5, 5, s);
// show leaderboard data (once available):
s = "";
for (i = 0; i &lt; leaderboard_count; i++) {
    draw_text(300, 50 + i * 20, string(leaderboard_rank[i]) + ".");
    draw_text(340, 50 + i * 20, string(leaderboard_score[i]));
    draw_text(400, 50 + i * 20, leaderboard_name[i]);
}
// check inputs:
var d = array_create(10);
for (i = 0; i &lt; 10; i++) {
    d[i] = keyboard_check_pressed(ord("0") + i);
}
// handle inputs:
if (d[1]) {
    q = gog_get_achievement("first_win");
    if (q &gt;= 0) {
        show_debug_message("Achievement status: " + string(q));
    } else show_debug_message(gog_get_error_text());
}
if (d[2]) {
    if (gog_set_achievement("first_win")) {
        show_debug_message("Got the achievement.");
    } else show_debug_message(gog_get_error_text());
}
if (d[3]) {
    leaderboard_intent = 1;
    leaderboard_new_score = get_integer("New score?", 1);
    if (gog_create_leaderboard("best_winners", "best_winners", lb_sort_descending, lb_disp_numeric)) {
        show_debug_message("Fetching leaderboard...");
    } else show_debug_message(gog_get_error_text());
}
if (d[4]) {
    leaderboard_intent = 2;
    if (gog_create_leaderboard("best_winners", "best_winners", lb_sort_descending, lb_disp_numeric)) {
        show_debug_message("Fetching leaderboard...");
    } else show_debug_message(gog_get_error_text());
}
if (d[5]) {
    leaderboard_intent = 3;
    if (gog_create_leaderboard("best_winners", "best_winners", lb_sort_descending, lb_disp_numeric)) {
        show_debug_message("Fetching leaderboard...");
    } else show_debug_message(gog_get_error_text());
}
if (d[6]) {
    leaderboard_intent = 4;
    if (gog_create_leaderboard("best_winners", "best_winners", lb_sort_descending, lb_disp_numeric)) {
        show_debug_message("Fetching leaderboard...");
    } else show_debug_message(gog_get_error_text());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
